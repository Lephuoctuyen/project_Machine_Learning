# -*- coding: utf-8 -*-
"""Viet NamWeather_Average_temperater_Analysis and Forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RoYHOgDoOdvGinVKmP2fp5XvMDQ7YMbj
"""

import pandas as pd

df = pd.read_csv('w.csv')
df.head()

df_T = df[df['PARAMETER'] == 'T2M']
df_T_Max = df[df['PARAMETER'] == 'T2M_MAX']
df_T_Min = df[df['PARAMETER'] == 'T2M_MIN']

df_T.head()

df_T.drop(columns = ['PARAMETER','ANN'], axis=1)
df_T = df_T.drop(columns=df_T.columns[0])
df_T.head()

df_T_1 = pd.melt(df_T, id_vars='YEAR', value_vars=df_T.columns[1:-1])
df_T_1.tail()

from datetime import datetime
df_T_1['Date'] =  df_T_1['variable'] + ' ' + df_T_1['YEAR'].astype(str)

df_T_1.loc[:,'Date'] = df_T_1['Date'].apply(lambda x : datetime.strptime(x, '%b %Y'))
df_T_1

df_T_1.columns=['Year', 'Month', 'Temprature', 'Date']
df_T_1.sort_values(by='Date', inplace=True)
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
fig = go.Figure(layout = go.Layout(yaxis=dict(range=[0, df_T_1['Temprature'].max()+1])))
fig.add_trace(go.Scatter(x=df_T_1['Date'], y=df_T_1['Temprature']), )
fig.update_layout(title='Temprature Throught Timeline:',
                 xaxis_title='Time', yaxis_title='Temprature in Degrees')
fig.update_layout(xaxis=go.layout.XAxis(
    rangeselector=dict(
        buttons=list([dict(label="Whole View", step="all"),
                      dict(count=1,label="One Year View",step="year",stepmode="todate")
                     ])),
        rangeslider=dict(visible=True),type="date")
)
fig.show()

fig = px.box(df_T_1, 'Month', 'Temprature')
fig.update_layout(title='Warmest, Coldest and Median Monthly Tempratue.')
fig.show()

"""sừ dụng thuật toán kmean để phân loại các mùa của năm"""

from sklearn.cluster import KMeans

l = []
# target
target = df_T_1['Temprature'].to_numpy().reshape(-1,1)
num_clusters = list(range(1, 10))

for k in num_clusters:
  km = KMeans(n_clusters = k)
  km.fit(target)
  l.append(km.inertia_)

fig = go.Figure(data=[
    go.Scatter(x = num_clusters, y=l, mode='lines'),
    go.Scatter(x = num_clusters, y=l, mode='markers')
])

fig.update_layout(title="Evaluation on number of clusters:",
                 xaxis_title = "Number of Clusters:",
                 yaxis_title = "Sum of Squared Distance",
                 showlegend=False)
fig.show()

km = KMeans(2)
km.fit(df_T_1['Temprature'].to_numpy().reshape(-1,1))
df_T_1.loc[:,'Temp Labels'] = km.labels_
fig = px.scatter(df_T_1, 'Date', 'Temprature', color='Temp Labels')
fig.update_layout(title = "Temprature clusters.",
                 xaxis_title="Date", yaxis_title="Temprature")
fig.show()

fig = px.histogram(x=df_T_1['Temprature'], nbins=200, histnorm='density')
fig.update_layout(title='Frequency chart of temprature readings:',
                 xaxis_title='Temprature', yaxis_title='Count')

df_T['Yearly Mean'] = df_T.iloc[:,1:].mean(axis=1) ## Axis 1 for row wise and axis 0 for columns.
fig = go.Figure(data=[
    go.Scatter(name='Yearly Tempratures' , x=df_T['YEAR'], y=df_T['Yearly Mean'], mode='lines'),
    go.Scatter(name='Yearly Tempratures' , x=df_T['YEAR'], y=df_T['Yearly Mean'], mode='markers')
])
fig.update_layout(title='Yearly Mean Temprature :',
                 xaxis_title='Time', yaxis_title='Temprature in Degrees')
fig.show()

fig = px.scatter(df_T,x = 'YEAR', y = 'Yearly Mean', trendline = 'lowess')
fig.update_layout(title='Trendline Over The Years :',
                 xaxis_title='Time', yaxis_title='Temprature in Degrees')
fig.show()

fig = px.line(df_T_1, 'Year', 'Temprature', facet_col='Month', facet_col_wrap=4)
fig.update_layout(title='Monthly temprature throught history:')
fig.show()

df_T['Hot'] = df_T[['JAN', 'FEB', 'MAR','OCT','NOV','DEC']].mean(axis=1)
df_T['Cold'] = df_T[['APR', 'MAY','JUN','JUL','AUG','SEP']].mean(axis=1)

seasonal_df_T = df_T[['YEAR', 'Hot', 'Cold']]
seasonal_df_T = pd.melt(seasonal_df_T, id_vars='YEAR', value_vars=seasonal_df_T.columns[1:])
seasonal_df_T.columns=['Year', 'Season', 'Temprature']

fig = px.scatter(seasonal_df_T, 'Year', 'Temprature', facet_col='Season', facet_col_wrap=2, trendline='ols')
fig.update_layout(title='Seasonal mean tempratures throught years:')
fig.show()

px.scatter(df_T_1, 'Month', 'Temprature', size='Temprature', animation_frame='Year')

"""Dự đoán nhiệt độ"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

df2 = df_T_1[['Year', 'Month', 'Temprature']].copy()
df2 = pd.get_dummies(df2)
y = df2[['Temprature']]
x = df2.drop(columns='Temprature')

dtr = DecisionTreeRegressor()
train_x, test_x, train_y, test_y = train_test_split(x,y,test_size=0.3)
dtr.fit(train_x, train_y)
pred = dtr.predict(test_x)
r2_score(test_y, pred)

next_Year = df_T_1[df_T_1['Year']==2021][['Year', 'Month']]
next_Year.Year.replace(2021,2022, inplace=True)
next_Year= pd.get_dummies(next_Year)
temp_2022 = dtr.predict(next_Year)

temp_2022 = {'Month':df_T_1['Month'].unique(), 'Temprature':temp_2022}
temp_2022 =pd.DataFrame(temp_2022)
temp_2022['Year'] = 2022
temp_2022

forecasted_temp = pd.concat([df_T_1,temp_2022], sort=False).groupby(by='Year')['Temprature'].mean().reset_index()
fig = go.Figure(data=[
    go.Scatter(name='Yearly Mean Temprature', x=forecasted_temp['Year'], y=forecasted_temp['Temprature'], mode='lines'),
    go.Scatter(name='Yearly Mean Temprature', x=forecasted_temp ['Year'], y=forecasted_temp['Temprature'], mode='markers')
])
fig.update_layout(title='Forecasted Temprature:',
                 xaxis_title='Time', yaxis_title='Temprature in Degrees')
fig.show()